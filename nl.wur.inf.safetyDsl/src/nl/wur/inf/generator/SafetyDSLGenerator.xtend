/*
 * generated by Xtext 2.18.0
 */
package nl.wur.inf.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import nl.wur.inf.safetyDSL.SafetyTactic
import java.util.ArrayList
import nl.wur.inf.safetyDSL.Fault
import nl.wur.inf.safetyDSL.ArchitecturalElement
import java.util.HashMap
import nl.wur.inf.safetyDSL.ClassDef
import org.eclipse.emf.common.util.EList
import nl.wur.inf.safetyDSL.ImplementationDetail
import java.util.Map
import nl.wur.inf.safetyDSL.SafetyTacticViewpoint
import nl.wur.inf.safetyDSL.SafetyCriticalViewpoint
import nl.wur.inf.safetyDSL.SafetyCritical
import nl.wur.inf.safetyDSL.Monitor
import nl.wur.inf.safetyDSL.SafetyRequirement

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SafetyDSLGenerator extends AbstractGenerator {

	HashMap<SafetyTactic, ArrayList<Fault>> tacticsAndFaults;
	HashMap<SafetyTactic, ArrayList<ArchitecturalElement>> tacticsAndModules;
	HashMap<SafetyRequirement, ArrayList<ArchitecturalElement>> SRsAndModules;
	HashMap<ArchitecturalElement, EList<ClassDef>> modulesAndClasses;
	HashMap<ClassDef, EList<String>> classesAndTestCases;
	
	
	override doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		tacticsAndFaults = new HashMap<SafetyTactic, ArrayList<Fault>>();
		tacticsAndModules = new HashMap<SafetyTactic, ArrayList<ArchitecturalElement>>();
		SRsAndModules = new HashMap<SafetyRequirement, ArrayList<ArchitecturalElement>> ();
		
		modulesAndClasses = new HashMap<ArchitecturalElement, EList<ClassDef>>();
		classesAndTestCases = new HashMap<ClassDef, EList<String>>();
		
		
		fsa.generateFile('safetyview.log', resource.compile);
		
		fsa.generateFile('ViewpointInformation.java', generateViewInformation());
		
		var tactics = tacticsAndModules.keySet
		for(tactic : tactics){
			for(module : (tacticsAndModules.get(tactic))){
				
				fsa.generateFile('MG-TCR-ForTactic_' + tactic.name + '_ForModule_' + module.name + '.py', generatePython(tactic, module));
				
				//fsa.generateFile('MutantGenerationForTactic_' + tactic.name + '_ForModule_' + module.name + '.java', generateMutants(tactic, module));
			
				//fsa.generateFile('TestCaseRunForTactic_'+ tactic.name + '_ForModule_' + module.name + '.java', testCaseRun(tactic, module));
			
			
			}
			
		}
	}

	
	def compile(Resource rs)'''
		....faults and tactics are collecting
		«getAllFaultsAndTactics(rs)»
		completed
		....modules and tactics are collecting
		«getAllModulesAndTactics(rs)»
		completed
		....modules and their classes are collecting
		«getAllImplementationRelations(rs)» 
		completed
	'''
	
	def generateMutants(SafetyTactic tactic,ArchitecturalElement module)'''
		import mujava.console.*;
		
		public class «'MutantGenerationForTactic_' + tactic.name + '_ForModule_' + module.name» {
			public static void main(String[] args) {
				String[] file_list =  new String[]{ «FOR clazz: modulesAndClasses.get(module) SEPARATOR ','» "«clazz.name».java" «ENDFOR» };
				String[] class_ops = new String[]{<<PLACEHOLDER>>}; 
				String[] traditional_ops = new String[]{<<PLACEHOLDER>>};
				MutantGeneratorMain.generateMutants(file_list, class_ops, traditional_ops);
				
			}
		}
	'''
	
	def generatePython(SafetyTactic tactic,ArchitecturalElement module)'''
	    mut.py -t «FOR clazz: modulesAndClasses.get(module) SEPARATOR ' '» «clazz.name».py «ENDFOR» -u «var relatedClazzes = modulesAndClasses.get(module)» «FOR key:relatedClazzes» «var testcases = findTestCases(key)» «FOR testcase:testcases SEPARATOR ' '» «testcase.replace('.', '/')».py «ENDFOR» «ENDFOR» -o <<placeholder>> --report-html Report_T-«tactic.name»_M-«module.name»
	'''
	
	def testCaseRun(SafetyTactic tactic, ArchitecturalElement module) '''
		import java.io.File;
		import java.util.ArrayList;
		import java.util.HashMap;
		import java.util.Set;
		
		import jxl.Workbook;
		import jxl.write.Label;
		import jxl.write.WritableSheet;
		import jxl.write.WritableWorkbook;
		import mujava.console.*;
		import mujava.test.TestResult;
		
		
		public class «'TestCaseRunForTactic_'+ tactic.name + '_ForModule_' + module.name» {
			
			private static int i = 1;
			
			private static int j = 1;
			
			private static TestResult[] runTestCases(String tClass, String tClassName){
				return TestCaseRunMain.runTestCases(tClass, tClassName , "All method", 3000,3);
			}
			
			public static void main(String[] args) {
				
				String testedClass="";
				String[] testClasses;
				TestResult[] tr;
				
				String clazzName = new Object() {}.getClass().getEnclosingClass().getName();
				
				//getModuleName
				String moduleName = clazzName.substring(clazzName.lastIndexOf("_") + 1);
				
				//getTacticName 
				String tacticName = clazzName.substring(clazzName.indexOf("_") + 1, clazzName.indexOf("_", clazzName.indexOf("_") + 1 ));
				
				try {
					WritableWorkbook workbook = Workbook.createWorkbook(new File("ReportForTactic_" + tacticName + "_ForModule_" + moduleName + ".xls"));
		
					WritableSheet sheet = workbook.createSheet("Fail_Pass_Info", 0);
					
					WritableSheet sheet2 = workbook.createSheet("Fault_SafetyTactic_Info",1);
					
					Label lbl;
							
					lbl = new Label(0,0, "Class");
					sheet.addCell(lbl);
		
					lbl = new Label(1,0, "Test Class");
					sheet.addCell(lbl);
		
					lbl = new Label(2,0, "Mutant");
					sheet.addCell(lbl);
		
					lbl = new Label(3,0, "Test Case");
					sheet.addCell(lbl);
		
					lbl = new Label(4,0, "Pass/Fail");
					sheet.addCell(lbl);
					
					//for each class run its test class
					«var relatedClazzes = modulesAndClasses.get(module)»
					«FOR key:relatedClazzes»
					testedClass = "«key.name»";					
					«var testcases = findTestCases(key)»
					testClasses = new String[]{ «FOR testcase:testcases SEPARATOR ','» "«testcase»" «ENDFOR» } ;
					for(String testcase : testClasses) {
					
						tr = runTestCases(testedClass, testcase);
					
						generateExcelReport(sheet, testedClass, testcase, tr);
					}
					«ENDFOR»
					
					generateFaultTacticInfo(sheet2, tacticName);
					
					workbook.write();
					workbook.close();
				} catch(Exception e){
					e.printStackTrace();
				}
			}
			
			private static void generateExcelReport(WritableSheet sheet, String clazzName, String testClazzName, TestResult[] trs ){
				try{
					Label lbl;
					
					for ( TestResult tr : trs){
						//TestResult tr = trs[1];
						
						Set<String> mutantNames = tr.mutantResults.keySet();
						for(String mutant : mutantNames){
							ArrayList<String[]> results = tr.mutantResults.get(mutant);
							for(String[] result : results){
										
								lbl = new Label(0,i, clazzName);
								sheet.addCell(lbl);
			
								lbl = new Label(1,i, testClazzName);
								sheet.addCell(lbl);
			
								lbl = new Label(2,i, mutant);
								sheet.addCell(lbl);
			
								lbl = new Label(3,i, result[0]);
								sheet.addCell(lbl);
													
								if(result[1].contains("pass"))
									lbl = new Label(4,i, "pass");
								else
									lbl = new Label(4,i, "fail");
			
								sheet.addCell(lbl);
			
								i++;
								
							}
						}
					}
					
				}	
				catch(Exception e){
					e.printStackTrace();
				}
			}
			
			private static void generateFaultTacticInfo(WritableSheet sheet, String tacticName){
		
				try{
				
					Label lbl;
					
					lbl = new Label(0,0, "Fault Name");
					sheet.addCell(lbl);
								
					ArrayList<String> faults = ViewpointInformation.tacticsAndFaults.get(tacticName);
					
					for(String fault : faults){
						lbl = new Label(0,j, fault);
						sheet.addCell(lbl);				
						j++;
					}
				
				}	
				catch(Exception e){
					e.printStackTrace();
				}
			}
		}
	'''
	
	def findTestCases(ClassDef key){
		var testcases = new ArrayList<String>()
		for (element : classesAndTestCases.entrySet()){
			if (element.key.name.equals(key.name))
				for(tc : element.value)
					testcases.add(tc)
		}
		return testcases;
		
	}
	
	def generateViewInformation()'''
		import java.util.HashMap;
		import java.util.Map;
		import java.util.ArrayList;
		import java.util.Arrays;
		
		public class ViewpointInformation{
			
			public static HashMap<String,ArrayList<String>> tacticsAndFaults;
			
			
			static{
				tacticsAndFaults = new HashMap<String, ArrayList<String>>();
				«var tactics = tacticsAndFaults.keySet»
				«FOR tactic:tactics»
				tacticsAndFaults.put("«tactic.name»", new ArrayList<String>(Arrays.asList(«FOR fault:tacticsAndFaults.get(tactic) SEPARATOR ','»"«fault.name»"«ENDFOR»)));
				«ENDFOR»
				
			}
		}
		
	'''
	

	def getAllImplementationRelations(Resource resource) {
		for(e: resource.allContents.filter(typeof(ImplementationDetail)).toIterable) {
			for(relation: e.moduleClassRelations)
				modulesAndClasses.put(relation.module, relation.classes);
			
			for(relation: e.classTestCaseRelations)
				classesAndTestCases.put(relation.clazz, relation.testCases);
				
		}
	}
	


	def getAllFaultsAndTactics(Resource resource) {
			for(e: resource.allContents.filter(typeof(SafetyTacticViewpoint)).toIterable) {
				for(tactic : e.safetyTactics ) {
					tacticsAndFaults.put(tactic, new ArrayList<Fault>);
					for(fault : tactic.handledFaults){
						tacticsAndFaults.get(tactic).add(fault);
					}
					
				}
			}


		}
	
	
	def getAllModulesAndTactics(Resource rs) {
		
			for(e: rs.allContents.filter(typeof(SafetyCriticalViewpoint)).toIterable) {
				for(element : e.elements) {
					if(element instanceof SafetyCritical){
						for(tactic : (element as SafetyCritical).getImplementedTactics()){
							if(!tacticsAndModules.containsKey(tactic)){
								tacticsAndModules.put(tactic, new ArrayList<ArchitecturalElement>);	
							}
							tacticsAndModules.get(tactic).add(element as SafetyCritical);						
						}
					}
					else if(element instanceof Monitor){
						for(tactic : (element as Monitor).getImplementedTactics()){
							if(!tacticsAndModules.containsKey(tactic)){
								tacticsAndModules.put(tactic, new ArrayList<ArchitecturalElement>);	
							}
							tacticsAndModules.get(tactic).add(element as Monitor);
						}
					}
				}
			}

		
	}
	
	/*def getAllModulesAndSRs(Resource rs) {
		
			for(e: rs.allContents.filter(typeof(SafetyCriticalViewpoint)).toIterable) {
				for(element : e.elements) {
					if(element instanceof SafetyCritical){
						for(sr : (element as SafetyCritical).getImplementedSafetyRequirements()){
							if(!SRsAndModules.containsKey(sr)){
								SRsAndModules.put(sr, new ArrayList<ArchitecturalElement>);	
							}
							SRsAndModules.get(sr).add(element as SafetyCritical);						
						}
					}
					else if(element instanceof Monitor){
						for(sr : (element as Monitor).getImplementedSafetyRequirements()){
							if(!SRsAndModules.containsKey(sr)){
								SRsAndModules.put(sr, new ArrayList<ArchitecturalElement>);	
							}
							SRsAndModules.get(sr).add(element as Monitor);	
						}
					}
				}
			}

		
	}*/
	
	


}
