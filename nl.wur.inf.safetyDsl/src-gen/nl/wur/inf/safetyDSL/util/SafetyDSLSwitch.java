/**
 * generated by Xtext 2.18.0
 */
package nl.wur.inf.safetyDSL.util;

import nl.wur.inf.safetyDSL.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see nl.wur.inf.safetyDSL.SafetyDSLPackage
 * @generated
 */
public class SafetyDSLSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static SafetyDSLPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SafetyDSLSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = SafetyDSLPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case SafetyDSLPackage.SAFETY_FRAMEWORK:
      {
        SafetyFramework safetyFramework = (SafetyFramework)theEObject;
        T result = caseSafetyFramework(safetyFramework);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.SAFETY_VIEWPOINT:
      {
        SafetyViewpoint safetyViewpoint = (SafetyViewpoint)theEObject;
        T result = caseSafetyViewpoint(safetyViewpoint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.HAZARD_VIEWPOINT:
      {
        HazardViewpoint hazardViewpoint = (HazardViewpoint)theEObject;
        T result = caseHazardViewpoint(hazardViewpoint);
        if (result == null) result = caseSafetyViewpoint(hazardViewpoint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.HAZARD_ELEMENT:
      {
        HazardElement hazardElement = (HazardElement)theEObject;
        T result = caseHazardElement(hazardElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.HAZARD:
      {
        Hazard hazard = (Hazard)theEObject;
        T result = caseHazard(hazard);
        if (result == null) result = caseHazardElement(hazard);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.SAFETY_REQUIREMENT:
      {
        SafetyRequirement safetyRequirement = (SafetyRequirement)theEObject;
        T result = caseSafetyRequirement(safetyRequirement);
        if (result == null) result = caseHazardElement(safetyRequirement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.CONSEQUENCE:
      {
        Consequence consequence = (Consequence)theEObject;
        T result = caseConsequence(consequence);
        if (result == null) result = caseHazardElement(consequence);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.FAULT:
      {
        Fault fault = (Fault)theEObject;
        T result = caseFault(fault);
        if (result == null) result = caseHazardElement(fault);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.FAULT_TREE:
      {
        FaultTree faultTree = (FaultTree)theEObject;
        T result = caseFaultTree(faultTree);
        if (result == null) result = caseHazardElement(faultTree);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.FAULT_TREE_NODE:
      {
        FaultTreeNode faultTreeNode = (FaultTreeNode)theEObject;
        T result = caseFaultTreeNode(faultTreeNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.HAZARD_RELATION:
      {
        HazardRelation hazardRelation = (HazardRelation)theEObject;
        T result = caseHazardRelation(hazardRelation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.DERIVED_FROM:
      {
        DerivedFrom derivedFrom = (DerivedFrom)theEObject;
        T result = caseDerivedFrom(derivedFrom);
        if (result == null) result = caseHazardRelation(derivedFrom);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.CAUSES:
      {
        Causes causes = (Causes)theEObject;
        T result = caseCauses(causes);
        if (result == null) result = caseHazardRelation(causes);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.CAUSED_BY:
      {
        CausedBy causedBy = (CausedBy)theEObject;
        T result = caseCausedBy(causedBy);
        if (result == null) result = caseHazardRelation(causedBy);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.SAFETY_TACTIC_VIEWPOINT:
      {
        SafetyTacticViewpoint safetyTacticViewpoint = (SafetyTacticViewpoint)theEObject;
        T result = caseSafetyTacticViewpoint(safetyTacticViewpoint);
        if (result == null) result = caseSafetyViewpoint(safetyTacticViewpoint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.SAFETY_TACTIC:
      {
        SafetyTactic safetyTactic = (SafetyTactic)theEObject;
        T result = caseSafetyTactic(safetyTactic);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.FAULT_AVOIDANCE:
      {
        FaultAvoidance faultAvoidance = (FaultAvoidance)theEObject;
        T result = caseFaultAvoidance(faultAvoidance);
        if (result == null) result = caseSafetyTactic(faultAvoidance);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.FAULT_DETECTION:
      {
        FaultDetection faultDetection = (FaultDetection)theEObject;
        T result = caseFaultDetection(faultDetection);
        if (result == null) result = caseSafetyTactic(faultDetection);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.FAULT_CONTAINMENT:
      {
        FaultContainment faultContainment = (FaultContainment)theEObject;
        T result = caseFaultContainment(faultContainment);
        if (result == null) result = caseSafetyTactic(faultContainment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.SAFETY_CRITICAL_VIEWPOINT:
      {
        SafetyCriticalViewpoint safetyCriticalViewpoint = (SafetyCriticalViewpoint)theEObject;
        T result = caseSafetyCriticalViewpoint(safetyCriticalViewpoint);
        if (result == null) result = caseSafetyViewpoint(safetyCriticalViewpoint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.ARCHITECTURAL_ELEMENT:
      {
        ArchitecturalElement architecturalElement = (ArchitecturalElement)theEObject;
        T result = caseArchitecturalElement(architecturalElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.SAFETY_CRITICAL:
      {
        SafetyCritical safetyCritical = (SafetyCritical)theEObject;
        T result = caseSafetyCritical(safetyCritical);
        if (result == null) result = caseArchitecturalElement(safetyCritical);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.CRITICALITY_LEVEL:
      {
        CriticalityLevel criticalityLevel = (CriticalityLevel)theEObject;
        T result = caseCriticalityLevel(criticalityLevel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.NON_SAFETY_CRITICAL:
      {
        NonSafetyCritical nonSafetyCritical = (NonSafetyCritical)theEObject;
        T result = caseNonSafetyCritical(nonSafetyCritical);
        if (result == null) result = caseArchitecturalElement(nonSafetyCritical);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.MONITOR:
      {
        Monitor monitor = (Monitor)theEObject;
        T result = caseMonitor(monitor);
        if (result == null) result = caseArchitecturalElement(monitor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.STATE:
      {
        State state = (State)theEObject;
        T result = caseState(state);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.SAFETY_CRITICAL_RELATION:
      {
        SafetyCriticalRelation safetyCriticalRelation = (SafetyCriticalRelation)theEObject;
        T result = caseSafetyCriticalRelation(safetyCriticalRelation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.ARCH_ELEMENT_TO_ARCH_ELEMENT:
      {
        ArchElementToArchElement archElementToArchElement = (ArchElementToArchElement)theEObject;
        T result = caseArchElementToArchElement(archElementToArchElement);
        if (result == null) result = caseSafetyCriticalRelation(archElementToArchElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.MONITOR_TO_ARCHITECTURAL_ELEMENT:
      {
        MonitorToArchitecturalElement monitorToArchitecturalElement = (MonitorToArchitecturalElement)theEObject;
        T result = caseMonitorToArchitecturalElement(monitorToArchitecturalElement);
        if (result == null) result = caseSafetyCriticalRelation(monitorToArchitecturalElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.REPORTS_FAULT:
      {
        ReportsFault reportsFault = (ReportsFault)theEObject;
        T result = caseReportsFault(reportsFault);
        if (result == null) result = caseSafetyCriticalRelation(reportsFault);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.IMPLEMENTATION_DETAIL:
      {
        ImplementationDetail implementationDetail = (ImplementationDetail)theEObject;
        T result = caseImplementationDetail(implementationDetail);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.MODULE_CLASS_RELATION:
      {
        ModuleClassRelation moduleClassRelation = (ModuleClassRelation)theEObject;
        T result = caseModuleClassRelation(moduleClassRelation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.CLASS_TEST_CASE_RELATION:
      {
        ClassTestCaseRelation classTestCaseRelation = (ClassTestCaseRelation)theEObject;
        T result = caseClassTestCaseRelation(classTestCaseRelation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.CLASS_DEF:
      {
        ClassDef classDef = (ClassDef)theEObject;
        T result = caseClassDef(classDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.OR_NODE_EXPRESSION:
      {
        ORNodeExpression orNodeExpression = (ORNodeExpression)theEObject;
        T result = caseORNodeExpression(orNodeExpression);
        if (result == null) result = caseFaultTreeNode(orNodeExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.AND_NODE_EXPRESSION:
      {
        ANDNodeExpression andNodeExpression = (ANDNodeExpression)theEObject;
        T result = caseANDNodeExpression(andNodeExpression);
        if (result == null) result = caseFaultTreeNode(andNodeExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.LEVEL_A:
      {
        LevelA levelA = (LevelA)theEObject;
        T result = caseLevelA(levelA);
        if (result == null) result = caseCriticalityLevel(levelA);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.LEVEL_B:
      {
        LevelB levelB = (LevelB)theEObject;
        T result = caseLevelB(levelB);
        if (result == null) result = caseCriticalityLevel(levelB);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.LEVEL_C:
      {
        LevelC levelC = (LevelC)theEObject;
        T result = caseLevelC(levelC);
        if (result == null) result = caseCriticalityLevel(levelC);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.LEVEL_D:
      {
        LevelD levelD = (LevelD)theEObject;
        T result = caseLevelD(levelD);
        if (result == null) result = caseCriticalityLevel(levelD);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.SAFE_STATE:
      {
        SafeState safeState = (SafeState)theEObject;
        T result = caseSafeState(safeState);
        if (result == null) result = caseState(safeState);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.READS:
      {
        Reads reads = (Reads)theEObject;
        T result = caseReads(reads);
        if (result == null) result = caseArchElementToArchElement(reads);
        if (result == null) result = caseSafetyCriticalRelation(reads);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.WRITES:
      {
        Writes writes = (Writes)theEObject;
        T result = caseWrites(writes);
        if (result == null) result = caseArchElementToArchElement(writes);
        if (result == null) result = caseSafetyCriticalRelation(writes);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.COMMANDS:
      {
        Commands commands = (Commands)theEObject;
        T result = caseCommands(commands);
        if (result == null) result = caseArchElementToArchElement(commands);
        if (result == null) result = caseSafetyCriticalRelation(commands);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.STOPS:
      {
        Stops stops = (Stops)theEObject;
        T result = caseStops(stops);
        if (result == null) result = caseMonitorToArchitecturalElement(stops);
        if (result == null) result = caseSafetyCriticalRelation(stops);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.STARTS:
      {
        Starts starts = (Starts)theEObject;
        T result = caseStarts(starts);
        if (result == null) result = caseMonitorToArchitecturalElement(starts);
        if (result == null) result = caseSafetyCriticalRelation(starts);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.INITS:
      {
        Inits inits = (Inits)theEObject;
        T result = caseInits(inits);
        if (result == null) result = caseMonitorToArchitecturalElement(inits);
        if (result == null) result = caseSafetyCriticalRelation(inits);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.RESTARTS:
      {
        Restarts restarts = (Restarts)theEObject;
        T result = caseRestarts(restarts);
        if (result == null) result = caseMonitorToArchitecturalElement(restarts);
        if (result == null) result = caseSafetyCriticalRelation(restarts);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SafetyDSLPackage.MONITORS:
      {
        Monitors monitors = (Monitors)theEObject;
        T result = caseMonitors(monitors);
        if (result == null) result = caseMonitorToArchitecturalElement(monitors);
        if (result == null) result = caseSafetyCriticalRelation(monitors);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Safety Framework</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Safety Framework</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSafetyFramework(SafetyFramework object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Safety Viewpoint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Safety Viewpoint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSafetyViewpoint(SafetyViewpoint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Hazard Viewpoint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Hazard Viewpoint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseHazardViewpoint(HazardViewpoint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Hazard Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Hazard Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseHazardElement(HazardElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Hazard</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Hazard</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseHazard(Hazard object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Safety Requirement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Safety Requirement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSafetyRequirement(SafetyRequirement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Consequence</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Consequence</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConsequence(Consequence object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fault</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fault</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFault(Fault object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fault Tree</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fault Tree</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFaultTree(FaultTree object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fault Tree Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fault Tree Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFaultTreeNode(FaultTreeNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Hazard Relation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Hazard Relation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseHazardRelation(HazardRelation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Derived From</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Derived From</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDerivedFrom(DerivedFrom object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Causes</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Causes</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCauses(Causes object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Caused By</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Caused By</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCausedBy(CausedBy object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Safety Tactic Viewpoint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Safety Tactic Viewpoint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSafetyTacticViewpoint(SafetyTacticViewpoint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Safety Tactic</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Safety Tactic</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSafetyTactic(SafetyTactic object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fault Avoidance</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fault Avoidance</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFaultAvoidance(FaultAvoidance object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fault Detection</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fault Detection</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFaultDetection(FaultDetection object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fault Containment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fault Containment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFaultContainment(FaultContainment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Safety Critical Viewpoint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Safety Critical Viewpoint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSafetyCriticalViewpoint(SafetyCriticalViewpoint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Architectural Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Architectural Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArchitecturalElement(ArchitecturalElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Safety Critical</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Safety Critical</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSafetyCritical(SafetyCritical object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Criticality Level</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Criticality Level</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCriticalityLevel(CriticalityLevel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Non Safety Critical</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Non Safety Critical</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNonSafetyCritical(NonSafetyCritical object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Monitor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Monitor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMonitor(Monitor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>State</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>State</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseState(State object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Safety Critical Relation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Safety Critical Relation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSafetyCriticalRelation(SafetyCriticalRelation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Arch Element To Arch Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Arch Element To Arch Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArchElementToArchElement(ArchElementToArchElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Monitor To Architectural Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Monitor To Architectural Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMonitorToArchitecturalElement(MonitorToArchitecturalElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Reports Fault</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Reports Fault</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReportsFault(ReportsFault object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Implementation Detail</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Implementation Detail</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImplementationDetail(ImplementationDetail object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Module Class Relation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Module Class Relation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModuleClassRelation(ModuleClassRelation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Class Test Case Relation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Class Test Case Relation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseClassTestCaseRelation(ClassTestCaseRelation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Class Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Class Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseClassDef(ClassDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>OR Node Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>OR Node Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseORNodeExpression(ORNodeExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AND Node Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AND Node Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseANDNodeExpression(ANDNodeExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Level A</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Level A</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLevelA(LevelA object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Level B</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Level B</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLevelB(LevelB object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Level C</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Level C</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLevelC(LevelC object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Level D</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Level D</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLevelD(LevelD object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Safe State</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Safe State</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSafeState(SafeState object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Reads</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Reads</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReads(Reads object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Writes</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Writes</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWrites(Writes object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Commands</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Commands</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCommands(Commands object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Stops</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Stops</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStops(Stops object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Starts</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Starts</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStarts(Starts object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Inits</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Inits</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInits(Inits object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Restarts</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Restarts</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRestarts(Restarts object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Monitors</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Monitors</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMonitors(Monitors object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //SafetyDSLSwitch
