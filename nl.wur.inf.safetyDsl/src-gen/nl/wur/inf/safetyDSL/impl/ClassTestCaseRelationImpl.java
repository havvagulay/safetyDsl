/**
 * generated by Xtext 2.18.0
 */
package nl.wur.inf.safetyDSL.impl;

import java.util.Collection;

import nl.wur.inf.safetyDSL.ClassDef;
import nl.wur.inf.safetyDSL.ClassTestCaseRelation;
import nl.wur.inf.safetyDSL.SafetyDSLPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Class Test Case Relation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link nl.wur.inf.safetyDSL.impl.ClassTestCaseRelationImpl#getClazz <em>Clazz</em>}</li>
 *   <li>{@link nl.wur.inf.safetyDSL.impl.ClassTestCaseRelationImpl#getTestCases <em>Test Cases</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ClassTestCaseRelationImpl extends MinimalEObjectImpl.Container implements ClassTestCaseRelation
{
  /**
   * The cached value of the '{@link #getClazz() <em>Clazz</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClazz()
   * @generated
   * @ordered
   */
  protected ClassDef clazz;

  /**
   * The cached value of the '{@link #getTestCases() <em>Test Cases</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTestCases()
   * @generated
   * @ordered
   */
  protected EList<String> testCases;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ClassTestCaseRelationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SafetyDSLPackage.Literals.CLASS_TEST_CASE_RELATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClassDef getClazz()
  {
    if (clazz != null && clazz.eIsProxy())
    {
      InternalEObject oldClazz = (InternalEObject)clazz;
      clazz = (ClassDef)eResolveProxy(oldClazz);
      if (clazz != oldClazz)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, SafetyDSLPackage.CLASS_TEST_CASE_RELATION__CLAZZ, oldClazz, clazz));
      }
    }
    return clazz;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ClassDef basicGetClazz()
  {
    return clazz;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setClazz(ClassDef newClazz)
  {
    ClassDef oldClazz = clazz;
    clazz = newClazz;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SafetyDSLPackage.CLASS_TEST_CASE_RELATION__CLAZZ, oldClazz, clazz));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getTestCases()
  {
    if (testCases == null)
    {
      testCases = new EDataTypeEList<String>(String.class, this, SafetyDSLPackage.CLASS_TEST_CASE_RELATION__TEST_CASES);
    }
    return testCases;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SafetyDSLPackage.CLASS_TEST_CASE_RELATION__CLAZZ:
        if (resolve) return getClazz();
        return basicGetClazz();
      case SafetyDSLPackage.CLASS_TEST_CASE_RELATION__TEST_CASES:
        return getTestCases();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SafetyDSLPackage.CLASS_TEST_CASE_RELATION__CLAZZ:
        setClazz((ClassDef)newValue);
        return;
      case SafetyDSLPackage.CLASS_TEST_CASE_RELATION__TEST_CASES:
        getTestCases().clear();
        getTestCases().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SafetyDSLPackage.CLASS_TEST_CASE_RELATION__CLAZZ:
        setClazz((ClassDef)null);
        return;
      case SafetyDSLPackage.CLASS_TEST_CASE_RELATION__TEST_CASES:
        getTestCases().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SafetyDSLPackage.CLASS_TEST_CASE_RELATION__CLAZZ:
        return clazz != null;
      case SafetyDSLPackage.CLASS_TEST_CASE_RELATION__TEST_CASES:
        return testCases != null && !testCases.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (testCases: ");
    result.append(testCases);
    result.append(')');
    return result.toString();
  }

} //ClassTestCaseRelationImpl
