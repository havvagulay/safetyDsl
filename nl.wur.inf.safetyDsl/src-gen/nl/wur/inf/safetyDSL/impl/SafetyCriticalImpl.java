/**
 * generated by Xtext 2.18.0
 */
package nl.wur.inf.safetyDSL.impl;

import java.util.Collection;

import nl.wur.inf.safetyDSL.CriticalityLevel;
import nl.wur.inf.safetyDSL.SafetyCritical;
import nl.wur.inf.safetyDSL.SafetyDSLPackage;
import nl.wur.inf.safetyDSL.SafetyRequirement;
import nl.wur.inf.safetyDSL.SafetyTactic;
import nl.wur.inf.safetyDSL.State;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Safety Critical</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link nl.wur.inf.safetyDSL.impl.SafetyCriticalImpl#getLevel <em>Level</em>}</li>
 *   <li>{@link nl.wur.inf.safetyDSL.impl.SafetyCriticalImpl#getImplementedSafetyRequirements <em>Implemented Safety Requirements</em>}</li>
 *   <li>{@link nl.wur.inf.safetyDSL.impl.SafetyCriticalImpl#getImplementedTactics <em>Implemented Tactics</em>}</li>
 *   <li>{@link nl.wur.inf.safetyDSL.impl.SafetyCriticalImpl#getSubelements <em>Subelements</em>}</li>
 *   <li>{@link nl.wur.inf.safetyDSL.impl.SafetyCriticalImpl#getStates <em>States</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SafetyCriticalImpl extends ArchitecturalElementImpl implements SafetyCritical
{
  /**
   * The cached value of the '{@link #getLevel() <em>Level</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLevel()
   * @generated
   * @ordered
   */
  protected CriticalityLevel level;

  /**
   * The cached value of the '{@link #getImplementedSafetyRequirements() <em>Implemented Safety Requirements</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImplementedSafetyRequirements()
   * @generated
   * @ordered
   */
  protected EList<SafetyRequirement> implementedSafetyRequirements;

  /**
   * The cached value of the '{@link #getImplementedTactics() <em>Implemented Tactics</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImplementedTactics()
   * @generated
   * @ordered
   */
  protected EList<SafetyTactic> implementedTactics;

  /**
   * The cached value of the '{@link #getSubelements() <em>Subelements</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSubelements()
   * @generated
   * @ordered
   */
  protected EList<SafetyCritical> subelements;

  /**
   * The cached value of the '{@link #getStates() <em>States</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStates()
   * @generated
   * @ordered
   */
  protected EList<State> states;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SafetyCriticalImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SafetyDSLPackage.Literals.SAFETY_CRITICAL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CriticalityLevel getLevel()
  {
    return level;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLevel(CriticalityLevel newLevel, NotificationChain msgs)
  {
    CriticalityLevel oldLevel = level;
    level = newLevel;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SafetyDSLPackage.SAFETY_CRITICAL__LEVEL, oldLevel, newLevel);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLevel(CriticalityLevel newLevel)
  {
    if (newLevel != level)
    {
      NotificationChain msgs = null;
      if (level != null)
        msgs = ((InternalEObject)level).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SafetyDSLPackage.SAFETY_CRITICAL__LEVEL, null, msgs);
      if (newLevel != null)
        msgs = ((InternalEObject)newLevel).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SafetyDSLPackage.SAFETY_CRITICAL__LEVEL, null, msgs);
      msgs = basicSetLevel(newLevel, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SafetyDSLPackage.SAFETY_CRITICAL__LEVEL, newLevel, newLevel));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<SafetyRequirement> getImplementedSafetyRequirements()
  {
    if (implementedSafetyRequirements == null)
    {
      implementedSafetyRequirements = new EObjectResolvingEList<SafetyRequirement>(SafetyRequirement.class, this, SafetyDSLPackage.SAFETY_CRITICAL__IMPLEMENTED_SAFETY_REQUIREMENTS);
    }
    return implementedSafetyRequirements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<SafetyTactic> getImplementedTactics()
  {
    if (implementedTactics == null)
    {
      implementedTactics = new EObjectResolvingEList<SafetyTactic>(SafetyTactic.class, this, SafetyDSLPackage.SAFETY_CRITICAL__IMPLEMENTED_TACTICS);
    }
    return implementedTactics;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<SafetyCritical> getSubelements()
  {
    if (subelements == null)
    {
      subelements = new EObjectResolvingEList<SafetyCritical>(SafetyCritical.class, this, SafetyDSLPackage.SAFETY_CRITICAL__SUBELEMENTS);
    }
    return subelements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<State> getStates()
  {
    if (states == null)
    {
      states = new EObjectResolvingEList<State>(State.class, this, SafetyDSLPackage.SAFETY_CRITICAL__STATES);
    }
    return states;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SafetyDSLPackage.SAFETY_CRITICAL__LEVEL:
        return basicSetLevel(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SafetyDSLPackage.SAFETY_CRITICAL__LEVEL:
        return getLevel();
      case SafetyDSLPackage.SAFETY_CRITICAL__IMPLEMENTED_SAFETY_REQUIREMENTS:
        return getImplementedSafetyRequirements();
      case SafetyDSLPackage.SAFETY_CRITICAL__IMPLEMENTED_TACTICS:
        return getImplementedTactics();
      case SafetyDSLPackage.SAFETY_CRITICAL__SUBELEMENTS:
        return getSubelements();
      case SafetyDSLPackage.SAFETY_CRITICAL__STATES:
        return getStates();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SafetyDSLPackage.SAFETY_CRITICAL__LEVEL:
        setLevel((CriticalityLevel)newValue);
        return;
      case SafetyDSLPackage.SAFETY_CRITICAL__IMPLEMENTED_SAFETY_REQUIREMENTS:
        getImplementedSafetyRequirements().clear();
        getImplementedSafetyRequirements().addAll((Collection<? extends SafetyRequirement>)newValue);
        return;
      case SafetyDSLPackage.SAFETY_CRITICAL__IMPLEMENTED_TACTICS:
        getImplementedTactics().clear();
        getImplementedTactics().addAll((Collection<? extends SafetyTactic>)newValue);
        return;
      case SafetyDSLPackage.SAFETY_CRITICAL__SUBELEMENTS:
        getSubelements().clear();
        getSubelements().addAll((Collection<? extends SafetyCritical>)newValue);
        return;
      case SafetyDSLPackage.SAFETY_CRITICAL__STATES:
        getStates().clear();
        getStates().addAll((Collection<? extends State>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SafetyDSLPackage.SAFETY_CRITICAL__LEVEL:
        setLevel((CriticalityLevel)null);
        return;
      case SafetyDSLPackage.SAFETY_CRITICAL__IMPLEMENTED_SAFETY_REQUIREMENTS:
        getImplementedSafetyRequirements().clear();
        return;
      case SafetyDSLPackage.SAFETY_CRITICAL__IMPLEMENTED_TACTICS:
        getImplementedTactics().clear();
        return;
      case SafetyDSLPackage.SAFETY_CRITICAL__SUBELEMENTS:
        getSubelements().clear();
        return;
      case SafetyDSLPackage.SAFETY_CRITICAL__STATES:
        getStates().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SafetyDSLPackage.SAFETY_CRITICAL__LEVEL:
        return level != null;
      case SafetyDSLPackage.SAFETY_CRITICAL__IMPLEMENTED_SAFETY_REQUIREMENTS:
        return implementedSafetyRequirements != null && !implementedSafetyRequirements.isEmpty();
      case SafetyDSLPackage.SAFETY_CRITICAL__IMPLEMENTED_TACTICS:
        return implementedTactics != null && !implementedTactics.isEmpty();
      case SafetyDSLPackage.SAFETY_CRITICAL__SUBELEMENTS:
        return subelements != null && !subelements.isEmpty();
      case SafetyDSLPackage.SAFETY_CRITICAL__STATES:
        return states != null && !states.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //SafetyCriticalImpl
