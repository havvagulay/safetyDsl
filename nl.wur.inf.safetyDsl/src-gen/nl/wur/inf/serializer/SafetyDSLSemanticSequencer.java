/*
 * generated by Xtext 2.18.0
 */
package nl.wur.inf.serializer;

import com.google.inject.Inject;
import java.util.Set;
import nl.wur.inf.safetyDSL.ANDNodeExpression;
import nl.wur.inf.safetyDSL.CausedBy;
import nl.wur.inf.safetyDSL.Causes;
import nl.wur.inf.safetyDSL.ClassDef;
import nl.wur.inf.safetyDSL.ClassTestCaseRelation;
import nl.wur.inf.safetyDSL.Commands;
import nl.wur.inf.safetyDSL.Consequence;
import nl.wur.inf.safetyDSL.DerivedFrom;
import nl.wur.inf.safetyDSL.Fault;
import nl.wur.inf.safetyDSL.FaultAvoidance;
import nl.wur.inf.safetyDSL.FaultContainment;
import nl.wur.inf.safetyDSL.FaultDetection;
import nl.wur.inf.safetyDSL.FaultTree;
import nl.wur.inf.safetyDSL.FaultTreeNode;
import nl.wur.inf.safetyDSL.Hazard;
import nl.wur.inf.safetyDSL.HazardViewpoint;
import nl.wur.inf.safetyDSL.ImplementationDetail;
import nl.wur.inf.safetyDSL.Inits;
import nl.wur.inf.safetyDSL.LevelA;
import nl.wur.inf.safetyDSL.LevelB;
import nl.wur.inf.safetyDSL.LevelC;
import nl.wur.inf.safetyDSL.LevelD;
import nl.wur.inf.safetyDSL.ModuleClassRelation;
import nl.wur.inf.safetyDSL.Monitor;
import nl.wur.inf.safetyDSL.Monitors;
import nl.wur.inf.safetyDSL.NonSafetyCritical;
import nl.wur.inf.safetyDSL.ORNodeExpression;
import nl.wur.inf.safetyDSL.Reads;
import nl.wur.inf.safetyDSL.ReportsFault;
import nl.wur.inf.safetyDSL.Restarts;
import nl.wur.inf.safetyDSL.SafeState;
import nl.wur.inf.safetyDSL.SafetyCritical;
import nl.wur.inf.safetyDSL.SafetyCriticalViewpoint;
import nl.wur.inf.safetyDSL.SafetyDSLPackage;
import nl.wur.inf.safetyDSL.SafetyFramework;
import nl.wur.inf.safetyDSL.SafetyRequirement;
import nl.wur.inf.safetyDSL.SafetyTacticViewpoint;
import nl.wur.inf.safetyDSL.Starts;
import nl.wur.inf.safetyDSL.State;
import nl.wur.inf.safetyDSL.Stops;
import nl.wur.inf.safetyDSL.Writes;
import nl.wur.inf.services.SafetyDSLGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class SafetyDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SafetyDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SafetyDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SafetyDSLPackage.AND_NODE_EXPRESSION:
				sequence_ANDNode(context, (ANDNodeExpression) semanticObject); 
				return; 
			case SafetyDSLPackage.CAUSED_BY:
				sequence_CausedBy(context, (CausedBy) semanticObject); 
				return; 
			case SafetyDSLPackage.CAUSES:
				sequence_Causes(context, (Causes) semanticObject); 
				return; 
			case SafetyDSLPackage.CLASS_DEF:
				sequence_ClassDef(context, (ClassDef) semanticObject); 
				return; 
			case SafetyDSLPackage.CLASS_TEST_CASE_RELATION:
				sequence_ClassTestCaseRelation(context, (ClassTestCaseRelation) semanticObject); 
				return; 
			case SafetyDSLPackage.COMMANDS:
				sequence_ArchElementToArchElement(context, (Commands) semanticObject); 
				return; 
			case SafetyDSLPackage.CONSEQUENCE:
				sequence_Consequence(context, (Consequence) semanticObject); 
				return; 
			case SafetyDSLPackage.DERIVED_FROM:
				sequence_DerivedFrom(context, (DerivedFrom) semanticObject); 
				return; 
			case SafetyDSLPackage.FAULT:
				sequence_Fault(context, (Fault) semanticObject); 
				return; 
			case SafetyDSLPackage.FAULT_AVOIDANCE:
				sequence_FaultAvoidance(context, (FaultAvoidance) semanticObject); 
				return; 
			case SafetyDSLPackage.FAULT_CONTAINMENT:
				sequence_FaultContainment(context, (FaultContainment) semanticObject); 
				return; 
			case SafetyDSLPackage.FAULT_DETECTION:
				sequence_FaultDetection(context, (FaultDetection) semanticObject); 
				return; 
			case SafetyDSLPackage.FAULT_TREE:
				sequence_FaultTree(context, (FaultTree) semanticObject); 
				return; 
			case SafetyDSLPackage.FAULT_TREE_NODE:
				sequence_PrimaryNode(context, (FaultTreeNode) semanticObject); 
				return; 
			case SafetyDSLPackage.HAZARD:
				sequence_Hazard(context, (Hazard) semanticObject); 
				return; 
			case SafetyDSLPackage.HAZARD_VIEWPOINT:
				sequence_HazardViewpoint(context, (HazardViewpoint) semanticObject); 
				return; 
			case SafetyDSLPackage.IMPLEMENTATION_DETAIL:
				sequence_ImplementationDetail(context, (ImplementationDetail) semanticObject); 
				return; 
			case SafetyDSLPackage.INITS:
				sequence_MonitorToArchitecturalElement(context, (Inits) semanticObject); 
				return; 
			case SafetyDSLPackage.LEVEL_A:
				sequence_CriticalityLevel(context, (LevelA) semanticObject); 
				return; 
			case SafetyDSLPackage.LEVEL_B:
				sequence_CriticalityLevel(context, (LevelB) semanticObject); 
				return; 
			case SafetyDSLPackage.LEVEL_C:
				sequence_CriticalityLevel(context, (LevelC) semanticObject); 
				return; 
			case SafetyDSLPackage.LEVEL_D:
				sequence_CriticalityLevel(context, (LevelD) semanticObject); 
				return; 
			case SafetyDSLPackage.MODULE_CLASS_RELATION:
				sequence_ModuleClassRelation(context, (ModuleClassRelation) semanticObject); 
				return; 
			case SafetyDSLPackage.MONITOR:
				sequence_Monitor(context, (Monitor) semanticObject); 
				return; 
			case SafetyDSLPackage.MONITORS:
				sequence_MonitorToArchitecturalElement(context, (Monitors) semanticObject); 
				return; 
			case SafetyDSLPackage.NON_SAFETY_CRITICAL:
				sequence_NonSafetyCritical(context, (NonSafetyCritical) semanticObject); 
				return; 
			case SafetyDSLPackage.OR_NODE_EXPRESSION:
				sequence_ORNode(context, (ORNodeExpression) semanticObject); 
				return; 
			case SafetyDSLPackage.READS:
				sequence_ArchElementToArchElement(context, (Reads) semanticObject); 
				return; 
			case SafetyDSLPackage.REPORTS_FAULT:
				sequence_ReportsFault(context, (ReportsFault) semanticObject); 
				return; 
			case SafetyDSLPackage.RESTARTS:
				sequence_MonitorToArchitecturalElement(context, (Restarts) semanticObject); 
				return; 
			case SafetyDSLPackage.SAFE_STATE:
				sequence_State(context, (SafeState) semanticObject); 
				return; 
			case SafetyDSLPackage.SAFETY_CRITICAL:
				sequence_SafetyCritical(context, (SafetyCritical) semanticObject); 
				return; 
			case SafetyDSLPackage.SAFETY_CRITICAL_VIEWPOINT:
				sequence_SafetyCriticalViewpoint(context, (SafetyCriticalViewpoint) semanticObject); 
				return; 
			case SafetyDSLPackage.SAFETY_FRAMEWORK:
				sequence_SafetyFramework(context, (SafetyFramework) semanticObject); 
				return; 
			case SafetyDSLPackage.SAFETY_REQUIREMENT:
				sequence_SafetyRequirement(context, (SafetyRequirement) semanticObject); 
				return; 
			case SafetyDSLPackage.SAFETY_TACTIC_VIEWPOINT:
				sequence_SafetyTacticViewpoint(context, (SafetyTacticViewpoint) semanticObject); 
				return; 
			case SafetyDSLPackage.STARTS:
				sequence_MonitorToArchitecturalElement(context, (Starts) semanticObject); 
				return; 
			case SafetyDSLPackage.STATE:
				sequence_State(context, (State) semanticObject); 
				return; 
			case SafetyDSLPackage.STOPS:
				sequence_MonitorToArchitecturalElement(context, (Stops) semanticObject); 
				return; 
			case SafetyDSLPackage.WRITES:
				sequence_ArchElementToArchElement(context, (Writes) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ORNode returns ANDNodeExpression
	 *     ORNode.ORNodeExpression_1_0 returns ANDNodeExpression
	 *     ANDNode returns ANDNodeExpression
	 *     ANDNode.ANDNodeExpression_1_0 returns ANDNodeExpression
	 *     PrimaryNode returns ANDNodeExpression
	 *
	 * Constraint:
	 *     (left=ANDNode_ANDNodeExpression_1_0 right=PrimaryNode)
	 */
	protected void sequence_ANDNode(ISerializationContext context, ANDNodeExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SafetyDSLPackage.Literals.FAULT_TREE_NODE__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SafetyDSLPackage.Literals.FAULT_TREE_NODE__LEFT));
			if (transientValues.isValueTransient(semanticObject, SafetyDSLPackage.Literals.FAULT_TREE_NODE__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SafetyDSLPackage.Literals.FAULT_TREE_NODE__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getANDNodeAccess().getANDNodeExpressionLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getANDNodeAccess().getRightPrimaryNodeParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SafetyCriticalRelation returns Commands
	 *     ArchElementToArchElement returns Commands
	 *
	 * Constraint:
	 *     (element1=[ArchitecturalElement|ID] element2+=[ArchitecturalElement|ID] element2+=[ArchitecturalElement|ID]*)
	 */
	protected void sequence_ArchElementToArchElement(ISerializationContext context, Commands semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SafetyCriticalRelation returns Reads
	 *     ArchElementToArchElement returns Reads
	 *
	 * Constraint:
	 *     (element1=[ArchitecturalElement|ID] element2+=[ArchitecturalElement|ID] element2+=[ArchitecturalElement|ID]*)
	 */
	protected void sequence_ArchElementToArchElement(ISerializationContext context, Reads semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SafetyCriticalRelation returns Writes
	 *     ArchElementToArchElement returns Writes
	 *
	 * Constraint:
	 *     (element1=[ArchitecturalElement|ID] element2+=[ArchitecturalElement|ID] element2+=[ArchitecturalElement|ID]*)
	 */
	protected void sequence_ArchElementToArchElement(ISerializationContext context, Writes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HazardRelation returns CausedBy
	 *     CausedBy returns CausedBy
	 *
	 * Constraint:
	 *     (hazard=[Hazard|ID] fault=[FaultTree|ID])
	 */
	protected void sequence_CausedBy(ISerializationContext context, CausedBy semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SafetyDSLPackage.Literals.HAZARD_RELATION__HAZARD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SafetyDSLPackage.Literals.HAZARD_RELATION__HAZARD));
			if (transientValues.isValueTransient(semanticObject, SafetyDSLPackage.Literals.CAUSED_BY__FAULT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SafetyDSLPackage.Literals.CAUSED_BY__FAULT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCausedByAccess().getHazardHazardIDTerminalRuleCall_0_0_1(), semanticObject.eGet(SafetyDSLPackage.Literals.HAZARD_RELATION__HAZARD, false));
		feeder.accept(grammarAccess.getCausedByAccess().getFaultFaultTreeIDTerminalRuleCall_2_0_1(), semanticObject.eGet(SafetyDSLPackage.Literals.CAUSED_BY__FAULT, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HazardRelation returns Causes
	 *     Causes returns Causes
	 *
	 * Constraint:
	 *     (hazard=[Hazard|ID] consequences+=[Consequence|ID] consequences+=[Consequence|ID]*)
	 */
	protected void sequence_Causes(ISerializationContext context, Causes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ClassDef returns ClassDef
	 *
	 * Constraint:
	 *     name=QualifiedName
	 */
	protected void sequence_ClassDef(ISerializationContext context, ClassDef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SafetyDSLPackage.Literals.CLASS_DEF__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SafetyDSLPackage.Literals.CLASS_DEF__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getClassDefAccess().getNameQualifiedNameParserRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ClassTestCaseRelation returns ClassTestCaseRelation
	 *
	 * Constraint:
	 *     (clazz=ClassDef testCases+=QualifiedName testCases+=QualifiedName*)
	 */
	protected void sequence_ClassTestCaseRelation(ISerializationContext context, ClassTestCaseRelation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HazardElement returns Consequence
	 *     Consequence returns Consequence
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Consequence(ISerializationContext context, Consequence semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SafetyDSLPackage.Literals.HAZARD_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SafetyDSLPackage.Literals.HAZARD_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConsequenceAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CriticalityLevel returns LevelA
	 *
	 * Constraint:
	 *     {LevelA}
	 */
	protected void sequence_CriticalityLevel(ISerializationContext context, LevelA semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CriticalityLevel returns LevelB
	 *
	 * Constraint:
	 *     {LevelB}
	 */
	protected void sequence_CriticalityLevel(ISerializationContext context, LevelB semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CriticalityLevel returns LevelC
	 *
	 * Constraint:
	 *     {LevelC}
	 */
	protected void sequence_CriticalityLevel(ISerializationContext context, LevelC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CriticalityLevel returns LevelD
	 *
	 * Constraint:
	 *     {LevelD}
	 */
	protected void sequence_CriticalityLevel(ISerializationContext context, LevelD semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HazardRelation returns DerivedFrom
	 *     DerivedFrom returns DerivedFrom
	 *
	 * Constraint:
	 *     (safetyRequirements+=[SafetyRequirement|ID] safetyRequirements+=[SafetyRequirement|ID]* hazard=[Hazard|ID])
	 */
	protected void sequence_DerivedFrom(ISerializationContext context, DerivedFrom semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SafetyTactic returns FaultAvoidance
	 *     FaultAvoidance returns FaultAvoidance
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         type=STRING 
	 *         handledFaults+=[Fault|QualifiedName] 
	 *         handledFaults+=[Fault|QualifiedName]* 
	 *         safetyReqs+=[SafetyRequirement|ID] 
	 *         safetyReqs+=[SafetyRequirement|ID]*
	 *     )
	 */
	protected void sequence_FaultAvoidance(ISerializationContext context, FaultAvoidance semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SafetyTactic returns FaultContainment
	 *     FaultContainment returns FaultContainment
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         type=STRING 
	 *         handledFaults+=[Fault|QualifiedName] 
	 *         handledFaults+=[Fault|QualifiedName]* 
	 *         safetyReqs+=[SafetyRequirement|ID] 
	 *         safetyReqs+=[SafetyRequirement|ID]*
	 *     )
	 */
	protected void sequence_FaultContainment(ISerializationContext context, FaultContainment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SafetyTactic returns FaultDetection
	 *     FaultDetection returns FaultDetection
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         type=STRING 
	 *         handledFaults+=[Fault|QualifiedName] 
	 *         handledFaults+=[Fault|QualifiedName]* 
	 *         safetyReqs+=[SafetyRequirement|ID] 
	 *         safetyReqs+=[SafetyRequirement|ID]*
	 *     )
	 */
	protected void sequence_FaultDetection(ISerializationContext context, FaultDetection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HazardElement returns FaultTree
	 *     FaultTree returns FaultTree
	 *
	 * Constraint:
	 *     (name=ID rootNode=PrimaryNode)
	 */
	protected void sequence_FaultTree(ISerializationContext context, FaultTree semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SafetyDSLPackage.Literals.HAZARD_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SafetyDSLPackage.Literals.HAZARD_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, SafetyDSLPackage.Literals.FAULT_TREE__ROOT_NODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SafetyDSLPackage.Literals.FAULT_TREE__ROOT_NODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFaultTreeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFaultTreeAccess().getRootNodePrimaryNodeParserRuleCall_2_0(), semanticObject.getRootNode());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HazardElement returns Fault
	 *     Fault returns Fault
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Fault(ISerializationContext context, Fault semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SafetyDSLPackage.Literals.HAZARD_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SafetyDSLPackage.Literals.HAZARD_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFaultAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SafetyViewpoint returns HazardViewpoint
	 *     HazardViewpoint returns HazardViewpoint
	 *
	 * Constraint:
	 *     (name=ID elements+=HazardElement+ relations+=HazardRelation+)
	 */
	protected void sequence_HazardViewpoint(ISerializationContext context, HazardViewpoint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HazardElement returns Hazard
	 *     Hazard returns Hazard
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Hazard(ISerializationContext context, Hazard semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SafetyDSLPackage.Literals.HAZARD_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SafetyDSLPackage.Literals.HAZARD_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHazardAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ImplementationDetail returns ImplementationDetail
	 *
	 * Constraint:
	 *     (moduleClassRelations+=ModuleClassRelation+ classTestCaseRelations+=ClassTestCaseRelation+)
	 */
	protected void sequence_ImplementationDetail(ISerializationContext context, ImplementationDetail semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ModuleClassRelation returns ModuleClassRelation
	 *
	 * Constraint:
	 *     (module=[ArchitecturalElement|ID] classes+=ClassDef classes+=ClassDef*)
	 */
	protected void sequence_ModuleClassRelation(ISerializationContext context, ModuleClassRelation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SafetyCriticalRelation returns Inits
	 *     MonitorToArchitecturalElement returns Inits
	 *
	 * Constraint:
	 *     (monitor=[Monitor|ID] safetyCritical+=[SafetyCritical|ID] safetyCritical+=[SafetyCritical|ID]*)
	 */
	protected void sequence_MonitorToArchitecturalElement(ISerializationContext context, Inits semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SafetyCriticalRelation returns Monitors
	 *     MonitorToArchitecturalElement returns Monitors
	 *
	 * Constraint:
	 *     (monitor=[Monitor|ID] safetyCritical+=[SafetyCritical|ID] safetyCritical+=[SafetyCritical|ID]*)
	 */
	protected void sequence_MonitorToArchitecturalElement(ISerializationContext context, Monitors semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SafetyCriticalRelation returns Restarts
	 *     MonitorToArchitecturalElement returns Restarts
	 *
	 * Constraint:
	 *     (monitor=[Monitor|ID] safetyCritical+=[SafetyCritical|ID] safetyCritical+=[SafetyCritical|ID]*)
	 */
	protected void sequence_MonitorToArchitecturalElement(ISerializationContext context, Restarts semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SafetyCriticalRelation returns Starts
	 *     MonitorToArchitecturalElement returns Starts
	 *
	 * Constraint:
	 *     (monitor=[Monitor|ID] safetyCritical+=[SafetyCritical|ID] safetyCritical+=[SafetyCritical|ID]*)
	 */
	protected void sequence_MonitorToArchitecturalElement(ISerializationContext context, Starts semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SafetyCriticalRelation returns Stops
	 *     MonitorToArchitecturalElement returns Stops
	 *
	 * Constraint:
	 *     (monitor=[Monitor|ID] safetyCritical+=[SafetyCritical|ID] safetyCritical+=[SafetyCritical|ID]*)
	 */
	protected void sequence_MonitorToArchitecturalElement(ISerializationContext context, Stops semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ArchitecturalElement returns Monitor
	 *     Monitor returns Monitor
	 *
	 * Constraint:
	 *     (name=ID (implementedTactics+=[SafetyTactic|QualifiedName] implementedTactics+=[SafetyTactic|QualifiedName]*)?)
	 */
	protected void sequence_Monitor(ISerializationContext context, Monitor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ArchitecturalElement returns NonSafetyCritical
	 *     NonSafetyCritical returns NonSafetyCritical
	 *
	 * Constraint:
	 *     (name=ID subelements+=NonSafetyCritical*)
	 */
	protected void sequence_NonSafetyCritical(ISerializationContext context, NonSafetyCritical semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ORNode returns ORNodeExpression
	 *     ORNode.ORNodeExpression_1_0 returns ORNodeExpression
	 *     ANDNode returns ORNodeExpression
	 *     ANDNode.ANDNodeExpression_1_0 returns ORNodeExpression
	 *     PrimaryNode returns ORNodeExpression
	 *
	 * Constraint:
	 *     (left=ORNode_ORNodeExpression_1_0 right=ANDNode)
	 */
	protected void sequence_ORNode(ISerializationContext context, ORNodeExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SafetyDSLPackage.Literals.FAULT_TREE_NODE__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SafetyDSLPackage.Literals.FAULT_TREE_NODE__LEFT));
			if (transientValues.isValueTransient(semanticObject, SafetyDSLPackage.Literals.FAULT_TREE_NODE__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SafetyDSLPackage.Literals.FAULT_TREE_NODE__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getORNodeAccess().getORNodeExpressionLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getORNodeAccess().getRightANDNodeParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ORNode returns FaultTreeNode
	 *     ORNode.ORNodeExpression_1_0 returns FaultTreeNode
	 *     ANDNode returns FaultTreeNode
	 *     ANDNode.ANDNodeExpression_1_0 returns FaultTreeNode
	 *     PrimaryNode returns FaultTreeNode
	 *
	 * Constraint:
	 *     value=[Fault|ID]
	 */
	protected void sequence_PrimaryNode(ISerializationContext context, FaultTreeNode semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SafetyDSLPackage.Literals.FAULT_TREE_NODE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SafetyDSLPackage.Literals.FAULT_TREE_NODE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrimaryNodeAccess().getValueFaultIDTerminalRuleCall_0_0_1(), semanticObject.eGet(SafetyDSLPackage.Literals.FAULT_TREE_NODE__VALUE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SafetyCriticalRelation returns ReportsFault
	 *     ReportsFault returns ReportsFault
	 *
	 * Constraint:
	 *     (safetyCritical1=[SafetyCritical|ID] safetyCritical2+=[SafetyCritical|ID] safetyCritical2+=[SafetyCritical|ID]*)
	 */
	protected void sequence_ReportsFault(ISerializationContext context, ReportsFault semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SafetyViewpoint returns SafetyCriticalViewpoint
	 *     SafetyCriticalViewpoint returns SafetyCriticalViewpoint
	 *
	 * Constraint:
	 *     (name=ID elements+=ArchitecturalElement+ relations+=SafetyCriticalRelation+)
	 */
	protected void sequence_SafetyCriticalViewpoint(ISerializationContext context, SafetyCriticalViewpoint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ArchitecturalElement returns SafetyCritical
	 *     SafetyCritical returns SafetyCritical
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         level=CriticalityLevel 
	 *         implementedSafetyRequirements+=[SafetyRequirement|QualifiedName] 
	 *         implementedSafetyRequirements+=[SafetyRequirement|QualifiedName]* 
	 *         (implementedTactics+=[SafetyTactic|QualifiedName] implementedTactics+=[SafetyTactic|QualifiedName]*)? 
	 *         (subelements+=[SafetyCritical|QualifiedName] subelements+=[SafetyCritical|QualifiedName]*)? 
	 *         (states+=[State|ID] states+=[State|ID]*)?
	 *     )
	 */
	protected void sequence_SafetyCritical(ISerializationContext context, SafetyCritical semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SafetyFramework returns SafetyFramework
	 *
	 * Constraint:
	 *     (views+=SafetyViewpoint+ detail=ImplementationDetail)
	 */
	protected void sequence_SafetyFramework(ISerializationContext context, SafetyFramework semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HazardElement returns SafetyRequirement
	 *     SafetyRequirement returns SafetyRequirement
	 *
	 * Constraint:
	 *     (name=ID subrequirements+=SafetyRequirement*)
	 */
	protected void sequence_SafetyRequirement(ISerializationContext context, SafetyRequirement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SafetyViewpoint returns SafetyTacticViewpoint
	 *     SafetyTacticViewpoint returns SafetyTacticViewpoint
	 *
	 * Constraint:
	 *     (name=ID safetyTactics+=SafetyTactic+)
	 */
	protected void sequence_SafetyTacticViewpoint(ISerializationContext context, SafetyTacticViewpoint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     State returns SafeState
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_State(ISerializationContext context, SafeState semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SafetyDSLPackage.Literals.STATE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SafetyDSLPackage.Literals.STATE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStateAccess().getNameIDTerminalRuleCall_0_1_1_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     State returns State
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_State(ISerializationContext context, State semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SafetyDSLPackage.Literals.STATE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SafetyDSLPackage.Literals.STATE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStateAccess().getNameIDTerminalRuleCall_0_0_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
