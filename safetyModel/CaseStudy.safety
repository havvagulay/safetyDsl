Hazard View ACCS_Hazard{
	Elements {
		hazard displayWrongAltitudeData;
		
		safetyRequirement receiveAltitudeDataFromTwoIndependentDevices;
		safetyRequirement altitudeDataShouldBeInDefinedRange;
		safetyRequirement oneAltitudeDataCannotBeReceived;
		safetyRequirement bothAltitudeDataCannotBeReceived;
		safetyRequirement twoAltitudeDataThresoldCheck;
		safetyRequirement displayAltitudeDataOnIndependentDevices;
		
		consequence aircraftCrash;
		consequence communicationErrorWithGroundStation;
		
		fault lossOfAltitudeDevice1;
		fault lossOfCommunicationAltitudeDevice1;
		fault lossOfAltitudeDevice2;
		fault lossOfCommunicationAltitudeDevice2;
		fault errorInAltitudeDevice1;
		fault errorInCommunicationAltitudeDevice1;
		fault errorInAltitudeDevice2;
		fault errorInCommunicationAltitudeDevice2;
		fault altitudeMgr1Fails;
		fault altitudeMgr2Fails;
		fault navMgrFails;
		fault errorInDisplayDevice1;
		fault errorInDisplayDevice2;
		fault graphicsMgr1Fails;
		fault graphicsMgr2Fails;
		
		faultTree wrongAltitudeData (
			((lossOfAltitudeDevice1 OR lossOfCommunicationAltitudeDevice1 OR altitudeMgr1Fails)
			AND (errorInAltitudeDevice2 OR errorInCommunicationAltitudeDevice2)) OR
			((lossOfAltitudeDevice2 OR lossOfCommunicationAltitudeDevice2 OR altitudeMgr2Fails)
			AND (errorInAltitudeDevice1 OR errorInCommunicationAltitudeDevice1)) OR
			((errorInAltitudeDevice1 OR errorInCommunicationAltitudeDevice1)
			AND (errorInAltitudeDevice2 OR errorInCommunicationAltitudeDevice2)) OR
			(errorInDisplayDevice1 OR graphicsMgr2Fails) OR (errorInDisplayDevice2 OR graphicsMgr1Fails)
			OR navMgrFails
		);
	}
	Relations {
		receiveAltitudeDataFromTwoIndependentDevices,
		altitudeDataShouldBeInDefinedRange,
		oneAltitudeDataCannotBeReceived,
		bothAltitudeDataCannotBeReceived,
		twoAltitudeDataThresoldCheck,
		displayAltitudeDataOnIndependentDevices derivedFrom displayWrongAltitudeData;
		
		displayWrongAltitudeData causedBy wrongAltitudeData;
	}
}

SafetyTacticView ACCS_SafetyTactics{
	faultTolerance redundantAltitudeData{
		type="Redundancy"
		toleratedFaults= lossOfAltitudeDevice1, lossOfAltitudeDevice2, lossOfCommunicationAltitudeDevice1,
			lossOfCommunicationAltitudeDevice2, errorInAltitudeDevice1, errorInAltitudeDevice2,
			errorInCommunicationAltitudeDevice1, errorInCommunicationAltitudeDevice2
	};
	
	faultTolerance altitudeDataWarning{
		type="Warning"
		toleratedFaults= lossOfAltitudeDevice1, lossOfAltitudeDevice2, lossOfCommunicationAltitudeDevice1,
			lossOfCommunicationAltitudeDevice2, errorInAltitudeDevice1, errorInAltitudeDevice2,
			errorInCommunicationAltitudeDevice1, errorInCommunicationAltitudeDevice2
		
	};
	
	faultTolerance recoverNavigation{
		type="Recovery"
		toleratedFaults= altitudeMgr1Fails, altitudeMgr2Fails, navMgrFails
	};
	
	faultDetection altitudeDiffCheck{
		type="Comparison"
		detectedFaults= errorInAltitudeDevice1, errorInCommunicationAltitudeDevice1,
			errorInAltitudeDevice2, errorInCommunicationAltitudeDevice2
	};
	
	faultDetection altitudeRangeCheck{
		type="Comparison"
		detectedFaults= errorInAltitudeDevice1, errorInCommunicationAltitudeDevice1,
			errorInAltitudeDevice2, errorInCommunicationAltitudeDevice2
	};
	
	faultDetection healthCheckForNavigation{
		type="Monitoring"
		detectedFaults= altitudeMgr1Fails, altitudeMgr2Fails, navMgrFails
	};
	
	faultTolerance redundantDisplays{
		type="Redundancy"
		toleratedFaults= graphicsMgr1Fails, graphicsMgr2Fails
	};
	
	faultTolerance recoverGraphics{
		type="Recovery"
		toleratedFaults= errorInDisplayDevice1, errorInDisplayDevice2
	};
	
	faultDetection healthCheckForGraphics{
		type="Monitoring"
		detectedFaults= graphicsMgr1Fails, graphicsMgr2Fails
	};
}

Safety-CriticalView ACCS_Safety_Critical{ 
	Elements {
		monitor graphicsMonitor {implementedTactics= healthCheckForGraphics, recoverGraphics};
		monitor managerMonitor {implementedTactics= healthCheckForNavigation, recoverNavigation};
		
		safety-critical altitude1Mgr{
			criticalityLevel=B;
			implementedSafetyRequirements= receiveAltitudeDataFromTwoIndependentDevices;
			implementedTactics= redundantAltitudeData, altitudeRangeCheck;
		};
		
		safety-critical altitude2Mgr{
			criticalityLevel=B;
			implementedSafetyRequirements= receiveAltitudeDataFromTwoIndependentDevices;
			implementedTactics= redundantAltitudeData, altitudeRangeCheck;
		};
		
		safety-critical navigationManager {
			criticalityLevel=B;
			implementedSafetyRequirements=bothAltitudeDataCannotBeReceived, twoAltitudeDataThresoldCheck, 
				oneAltitudeDataCannotBeReceived, receiveAltitudeDataFromTwoIndependentDevices;
			implementedTactics=redundantAltitudeData, altitudeDiffCheck, altitudeDataWarning;
		};
		
		safety-critical graphics1Manager {
			criticalityLevel=D;
			implementedSafetyRequirements=displayAltitudeDataOnIndependentDevices;
			implementedTactics=altitudeDataWarning, redundantDisplays;
		};
		
		safety-critical graphics2Manager {
			criticalityLevel=D;
			implementedSafetyRequirements=displayAltitudeDataOnIndependentDevices;
			implementedTactics=altitudeDataWarning, redundantDisplays;
		};
	}
	Relations {
		graphicsMonitor monitors graphics1Manager, graphics2Manager;
		graphicsMonitor stops graphics1Manager, graphics2Manager;
		graphicsMonitor starts graphics1Manager, graphics2Manager;
		graphicsMonitor inits graphics1Manager, graphics2Manager;
		
		managerMonitor monitors navigationManager, altitude1Mgr, altitude2Mgr;
		managerMonitor starts navigationManager, altitude1Mgr, altitude2Mgr;
		managerMonitor stops navigationManager, altitude1Mgr, altitude2Mgr;
		managerMonitor inits navigationManager, altitude1Mgr, altitude2Mgr;
		
		navigationManager commands graphics1Manager, graphics2Manager;
		navigationManager reads altitude1Mgr, altitude2Mgr;
		graphics1Manager reads navigationManager;
		graphics2Manager reads navigationManager;
		altitude1Mgr reportsFault navigationManager;
		altitude1Mgr reportsFault navigationManager;
	}
}

ImplementationRelations {
	Module-Class Relations{
		navigationManager composesOf = { NavigationMgr };
		altitude1Mgr composesOf = {Altitude, M1553ProtocolAltitude, Altitude1Mgr };
		altitude2Mgr composesOf = {Altitude, A429ProtocolAltitude, Altitude2Mgr };
		graphics1Manager composesOf = {GraphicsMgr};
		graphics2Manager composesOf = {GraphicsMgr};
		graphicsMonitor composesOf = {GraphicsMonitor};
		managerMonitor composesOf = {ManagerMonitor};
	};
	
	
	Class-Test Case Relations{
		Altitude testWith = {TestAltitude};
		A429ProtocolAltitude testWith = {TestA429ProtocolAltitude};
		M1553ProtocolAltitude testWith = {TestM1553ProtocolAltitude};
		Altitude1Mgr testWith = {TestAltitude1Mgr};
		Altitude2Mgr testWith = {TestAltitude2Mgr};
		NavigationMgr testWith = {TestNavigationMgr};
		GraphicsMgr testWith = {TestGraphicsMgr};
		GraphicsMonitor testWith = {TestGraphicsMonitior};
		ManagerMonitor testWith = {TestManagerMonitor};
	};
}
